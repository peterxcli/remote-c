{
	"full": {
		"prefix": "full-code",
		"body": [
			"#include <stdio.h>",
			"#include <ctype.h>",
			"#include <stdlib.h>",
			"#include <math.h>",
			"#include<string.h>",
			"#include <stdbool.h>",
			"#define int long long",
			" ",
			"int compare(const void *x, const void *y);",
			"int minm(int x, int y);",
			"int maxm(int x, int y);",
			"int gcd(int a, int b);",
			"int lower_bound(int arr[], int l, int r, int x);",
			"int upper_bound(int arr[], int l, int r, int x);",
			"void merge(int arr[], int l, int m, int r);",
			"void merge_sort(int arr[], int l, int r);",
			"bool exponent_2(int n);",
			"void swap(int *a, int *b);",
			"void revarr(int arr[], int n);",
			"int mod(int a, int m);",
			"void toLower(char *s);",
			"",
			"signed main() {",
			"    ",
			"}",
			"",
			"int compare(const void *x, const void *y) { return (*(int *)y - *(int *)x); }",
			"int minm(int x, int y) { return x < y ? x : y; }",
			"int maxm(int x, int y) { return x > y ? x : y; }",
			"int gcd(int a, int b) {",
			"    if (b == 0)",
			"        return a;",
			"    return gcd(b, a % b);",
			"}",
			"",
			"int lower_bound(int arr[], int l, int r, int x) {",
			"    while ((l + 1) < r) {",
			"        int mid = (l + r) / 2;",
			"        if (x <= arr[mid]) r = mid;",
			"        else l = mid;",
			"    }",
			"    return r;",
			"}",
			"",
			"int upper_bound(int arr[], int l, int r, int x) {",
			"    while ((l + 1) < r) {",
			"        int mid = (l + r) / 2;",
			"        if (x >= arr[mid]) l = mid;",
			"        else r = mid;",
			"    }",
			"",
			"    if (x > arr[l] && x <= arr[r]) return r;",
			"    else return l;",
			"}",
			"",
			"void merge(int arr[], int l, int m, int r) {",
			"    int i, j, k;",
			"    int n1 = m - l + 1;",
			"    int n2 = r - m;",
			"",
			"    int L[n1], R[n2];",
			"",
			"    for (i = 0; i < n1; i++) L[i] = arr[l + i];",
			"    for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j];",
			"",
			"    i = 0;",
			"    j = 0;",
			"    k = l;",
			"    while (i < n1 && j < n2) {",
			"        if (L[i] <= R[j])",
			"        {",
			"            arr[k] = L[i];",
			"            i++;",
			"        }",
			"        else {",
			"            arr[k] = R[j];",
			"            j++;",
			"        }",
			"        k++;",
			"    }",
			"",
			"    while (i < n1) {",
			"        arr[k] = L[i];",
			"        i++;",
			"        k++;",
			"    }",
			"",
			"    while (j < n2) {",
			"        arr[k] = R[j];",
			"        j++;",
			"        k++;",
			"    }",
			"}",
			"",
			"void merge_sort(int arr[], int l, int r) {",
			"    if (l < r) {",
			"        int m = l + (r - l) / 2;",
			"",
			"        merge_sort(arr, l, m);",
			"        merge_sort(arr, m + 1, r);",
			"        merge(arr, l, m, r);",
			"    }",
			"}",
			"bool exponent_2(int n) {",
			"    return (n & (n-1)) == n; ",
			"}",
			"",
			"void swap(int *a, int *b) {",
			"    int temp = *a;",
			"    *a = *b;",
			"    *b = temp;",
			"}",
			"",
			"void revarr(int arr[], int n) {",
			"    for (int i = 0; i < n / 2; i++) {",
			"        swap(&arr[i], &arr[n - i - 1]);",
			"    }",
			"}",
			"int mod(int a, int m) {",
			"    return (a % m + m) % m;",
			"}",
			"void toLower(char *s) {",
			"    int n = strlen(s);",
			"    for (int i = 0; i < n; i++) {",
			"        s[i] = tolower(s[i]);",
			"    }",
			"}"
		],
		"description": ""
	},
	"vector": {
		"prefix": "vector",
		"body": [
			"#include <stdlib.h>",
			"",
			"#define VEC_CAPACITY 1",
			"#define TOTAL 0",
			"#define make_vector(vec) \\",
			"    vector vec;          \\",
			"    initialise(&vec)",
			"",
			"typedef struct VECTOR vector;  // forward declaration (data type - node,vector)",
			"typedef struct NODE",
			"    node;  // no forward declaration , which works in g++, not gcc.",
			"",
			"struct NODE {",
			"    void** g_array;",
			"    int total;",
			"    int capacity;",
			"};",
			"",
			"struct VECTOR {",
			"    node N;",
			"    int (*fptr_size)(vector*);",
			"    int (*fptr_capacity)(vector*);",
			"    void* (*fptr_get)(vector*, int);",
			"    void (*fptr_insert)(vector*, void*, int);",
			"    void (*fptr_resize)(vector*, int);",
			"    void (*fptr_free)(vector*);",
			"};",
			"",
			"int size(vector* v) {",
			"    // return number of elements present.",
			"    int totalCount = 0;",
			"    if (v) {",
			"        totalCount = v->N.total;",
			"    }",
			"    return totalCount;",
			"};",
			"",
			"int capacity(vector* v) {",
			"    // return maximum number of element's vector can currently hold.",
			"    int totalCount = 0;",
			"    if (v) {",
			"        totalCount = v->N.capacity;",
			"    }",
			"    return totalCount;",
			"};",
			"",
			"void _free(vector* v) {",
			"    // free all the element's of vector.",
			"    v->N.total = 0;",
			"    for (int i = 0; i < v->N.capacity; i++) {",
			"        free(v->N.g_array[i]);",
			"    }",
			"    v->N.capacity = 0;",
			"    return;",
			"}",
			"",
			"void resize(vector* v, int sz) {",
			"    // resize the vector to given size.",
			"    // printf(\"resized:%d\\n\",sz);",
			"    v->N.g_array = (void**)realloc(v->N.g_array, sz * sizeof(void*));",
			"    v->N.capacity = sz;",
			"    return;",
			"}",
			"",
			"void* get(vector* v, int index) {",
			"    // get the element at index specified.",
			"    void* readData = NULL;",
			"    if (v) {",
			"        if ((index >= 0) && (index < (v->N.capacity))) {",
			"            readData = v->N.g_array[index];",
			"        }",
			"    }",
			"    return readData;",
			"}",
			"",
			"void insert(vector* v, void* item, int index) {",
			"    // insert the element at specified index.",
			"    if (v && index < (v->fptr_capacity(v))) {",
			"        v->N.g_array[index] = item;",
			"        v->N.total++;",
			"        return;",
			"    } else if (index == (v->N.capacity)) {",
			"        // increase the capacity by 2 when exceeds limit.",
			"        (v->N.capacity) = ((v->N.capacity) << 1);",
			"        v->fptr_resize(v, v->N.capacity);",
			"        v->N.g_array[index] = item;",
			"        v->N.total++;",
			"        return;",
			"    } else",
			"        return;",
			"};",
			"",
			"void initialise(vector* v) {",
			"    // initialise the vector.",
			"    v->N.g_array = (void**)malloc(VEC_CAPACITY * sizeof(void*));",
			"    v->N.total = TOTAL;",
			"    v->N.capacity = VEC_CAPACITY;",
			"",
			"    v->fptr_size = size;",
			"    v->fptr_capacity = capacity;",
			"    v->fptr_get = get;",
			"    v->fptr_insert = insert;",
			"    v->fptr_resize = resize;",
			"    v->fptr_free = _free;",
			"    return;",
			"};",
			"",
			"// int main() {",
			"//     make_vector(ans);",
			"//     int n;",
			"//     scanf(\"%d\", &n);",
			"//     ans.fptr_resize(&ans, n);",
			"//     for (int i = 0; i < n; i++) {",
			"//         int tmp;",
			"//         scanf(\"%d\", &tmp);",
			"//         ans.fptr_insert(&ans, tmp, i);",
			"//     }",
			"//     for (int i = 0; i < ans.fptr_size(&ans); i++) {",
			"//         printf(\"%d\\n\", (int)ans.fptr_get(&ans, i));",
			"//     }",
			"// }"
		],
		"description": ""
	},
	"base": {
		"prefix": "code",
		"body": [
			"#include <ctype.h>",
			"#include <math.h>",
			"#include <stdbool.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#define int long long",
			"",
			"signed greater(const void *x, const void *y);",
			"signed less(const void *x, const void *y);",
			"int minm(int x, int y);",
			"int maxm(int x, int y);",
			"int gcd(int a, int b);",
			"bool exponent_2(int n);",
			"void swap(int *a, int *b);",
			"void revarr(int arr[], int n);",
			"int mod(int a, int m);",
			"void toLower(char *s);",
			"",
			"signed main() {",
			"    ",
			"}",
			"",
			"//int arr[n];",
			"//qsort(arr, n, sizeof(int), cmp);",
			"signed greater(const void *x, const void *y) { return (*(int *)x - *(int *)y); }",
			"signed less(const void *x, const void *y) { return (*(int *)y - *(int *)x); }",
			"int minm(int x, int y) { return x < y ? x : y; }",
			"int maxm(int x, int y) { return x > y ? x : y; }",
			"int gcd(int a, int b) {",
			"    if (b == 0)",
			"        return a;",
			"    return gcd(b, a % b);",
			"}",
			"",
			"bool exponent_2(int n) {",
			"    return (n & (n - 1)) == n;",
			"}",
			"",
			"void swap(int *a, int *b) {",
			"    int temp = *a;",
			"    *a = *b;",
			"    *b = temp;",
			"}",
			"",
			"void revarr(int arr[], int n) {",
			"    for (int i = 0; i < n / 2; i++) {",
			"        swap(&arr[i], &arr[n - i - 1]);",
			"    }",
			"}",
			"int mod(int a, int m) {",
			"    return (a % m + m) % m;",
			"}",
			"void toLower(char *s) {",
			"    int n = strlen(s);",
			"    for (int i = 0; i < n; i++) {",
			"        s[i] = tolower(s[i]);",
			"    }",
			"}"
		],
		"description": ""
	}
}
